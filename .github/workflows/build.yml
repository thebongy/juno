on: push
name: Continuous integration

jobs:
  build:
    if: github.event_name == 'push'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        rust:
          - stable
          - beta
          - nightly

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all
      
      - name: Upload Artifact (Linux/MacOS)
        uses: actions/upload-artifact@v1
        if: matrix.rust == 'stable' && matrix.os != 'windows-latest'
        with:
          name: juno-${{matrix.os}}
          path: target/release/juno
      
      - name: Upload Artifact (Windows)
        uses: actions/upload-artifact@v1
        if: matrix.rust == 'stable' && matrix.os == 'windows-latest'
        with:
          name: juno-${{matrix.os}}
          path: target/release/juno.exe


      - name: Cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  release: # Publish release on push to master
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Check Release Version
        uses: thebongy/version-check@v1
        with:
          file: Cargo.toml
        id: version_check
      
      - name: Download Windows Artifact
        uses: actions/download-artifact@v1
        with:
          name: juno-windows-latest
          path: release

      - name: Download MacOS Artifact
        uses: actions/download-artifact@v1
        with:
          name: juno-macos-latest
          path: release

      - name: Download Linux Artifact
        uses: actions/download-artifact@v1
        with:
          name: juno-ubuntu-latest
          path: release
      
      - name: Debug
        run: |
          ls release
          ls release/juno-windows-latest
          ls release/juno-ubuntu-latest
          ls release/juno-macos-latest
        
      - name: Publish Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/juno-windows-latest/juno.exe
            release/juno-macos-latest/juno
            release/juno-ubuntu-latest/juno
          tag_name: ${{steps.version_check.outputs.releaseVersion}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}